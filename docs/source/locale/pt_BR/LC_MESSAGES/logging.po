# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Datarisk
# This file is distributed under the same license as the neomaril-codex
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: neomaril-codex \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-05 15:49-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: pt\n"
"Language-Team: pt <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/logging.rst:2
msgid "Logging module"
msgstr "Módulo de registro (logging)"

#: ../../source/logging.rst:5
msgid ""
"Neomaril has a log parser that clean logs and tries to find useful "
"information. This is the module to access this functionalities. Since "
"there are a lot of logger types is hard to create the perfect parser, so "
"using this one helps your model script being parsed by Neomaril and "
"sending cleaner messages."
msgstr ""
"O Neomaril tem uma funcionalidade para limpar os registros (logs), tentando deixar apenas informações "
"úteis. Nessa página tratamos deste módulo. Como "
"existem diversos tipos de registradores (loggers) é difícil criar um mecanismo suficientemente genérico e eficiente para fazer a análise em todos os possíveis cenários. Entretanto, "
"recomendamos o uso deste módulo pois foi testado e já está integrado ao Neomaril, sendo "
"capaz de limpar e enviar suas mensagens adequadamente."

#: ../../source/logging.rst:10
msgid "neomaril\\_codex.logging.Logger"
msgstr "neomaril\\_codex.logging.Logger"

#: neomaril_codex.logging.Logger:1 of
msgid "Bases: :py:class:`object`"
msgstr "Bases: :py:class:`object`"

#: neomaril_codex.logging.Logger:1 of
msgid "Class to custom logger for model scripts."
msgstr "Class to custom logger for model scripts."

#: neomaril_codex.logging.Logger:5 of
msgid ""
"Attribute that designates the type of the model being executed. Can be "
"'Sync' or 'Async'"
msgstr ""
"Attribute that designates the type of the model being executed. Can be "
"'Sync' or 'Async'"

#: neomaril_codex.logging.Logger of
msgid "type"
msgstr "type"

#: neomaril_codex.logging.Logger:7 of
msgid "str"
msgstr "str"

#: neomaril_codex.logging.Logger of
msgid "Raises"
msgstr "Raises"

#: neomaril_codex.logging.Logger:9 of
msgid "Invalid input for the logging functions"
msgstr "Invalid input for the logging functions"

#: neomaril_codex.logging.Logger:12 neomaril_codex.logging.Logger.callback:5 of
msgid "Example"
msgstr "Example"

#: neomaril_codex.logging.Logger:13 of
msgid ""
"The logger needs to be implemented inside the function being executed by "
"Neomaril like this:"
msgstr ""
"The logger needs to be implemented inside the function being executed by "
"Neomaril like this:"

#: neomaril_codex.logging.Logger.callback:1 of
msgid ""
"Compile the logs with the response for Sync models only. Should be the "
"return of function being executed. This output should be able to be "
"parsed as a JSON, so if you are using a non-primitive type as your "
"return, make sure it can be parsed by `json.dumps`."
msgstr ""
"Compile the logs with the response for Sync models only. Should be the "
"return of function being executed. This output should be able to be "
"parsed as a JSON, so if you are using a non-primitive type as your "
"return, make sure it can be parsed by `json.dumps`."

#: neomaril_codex.logging.Logger.callback neomaril_codex.logging.Logger.debug
#: neomaril_codex.logging.Logger.error neomaril_codex.logging.Logger.warning of
msgid "Parameters"
msgstr "Parameters"

#: neomaril_codex.logging.Logger.callback:19 of
msgid "Output of the function being executed."
msgstr "Output of the function being executed."

#: neomaril_codex.logging.Logger.debug:1 of
msgid "Logs a DEBUG message."
msgstr "Logs a DEBUG message."

#: neomaril_codex.logging.Logger.debug:3 neomaril_codex.logging.Logger.error:3
#: neomaril_codex.logging.Logger.warning:3 of
msgid "Message that will be logged"
msgstr "Message that will be logged"

#: neomaril_codex.logging.Logger.error:1 of
msgid "Logs a ERROR message."
msgstr "Logs a ERROR message."

#: neomaril_codex.logging.Logger.warning:1 of
msgid "Logs a WARNING message."
msgstr "Logs a WARNING message."

